// Code generated by "esc -pkg frontend -o services/frontend/gen_assets.go -prefix services/frontend/web_assets services/frontend/web_assets"; DO NOT EDIT.

package frontend

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "services/frontend/web_assets/index.html",
		size:    3867,
		modtime: 1580944446,
		compressed: `
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
`,
	},

	"/": {
		name:  "/",
		local: `services/frontend/web_assets`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"services/frontend/web_assets": {
		_escData["/index.html"],
	},
}
